Section 1: Basic Retrieval

1
call db.schema.visualization

2
call db.propertyKeys

3
match (n) return n

4
match (n:Person)
return n

5
match (n:Movie {released: 2003})
return n

6
match (n:Movie {released: 2003}) return n.title, n.released

7
match (n:Movie {released: 2003}) return n.title as `Movie title`, n.released as `Release Date`

8
match (n:Movie {title: "Speed Racer"})<-[:WROTE]-(a:Person) return a,n

9
match (n:Movie)--(a:Person {name: "Tom Hanks"}) return n,a

10
match (n:Movie)-[r]-(a:Person {name: "Tom Hanks"}) return n.title,a.name, type(r)

11
match (n:Movie)-[r:ACTED_IN]-(p:Person {name: "Tom Hanks"}) return n.title,p.name,r.roles

12
match (n:Movie {title: "The Matrix"})-[r:ACTED_IN]-(p:Person) return n.title,p.name,r.roles

Section 2: WHERE Clause

1
match (n:Movie)<-[r:ACTED_IN]-(p:Person) 
where p.name = "Tom Cruise"
return n.title,p.name,r.roles

2
match (p:Person) 
where 1970<=p.born<1980
return p.name,p.born

3
match (n:Movie {title: "The Matrix"})-[r:ACTED_IN]-(p:Person) 
where p.born>1960
return n.title,p.name,r.roles

4
match (n:Movie)<-[r]-(p:Person)
where type(r) = "WROTE"
return n.title, p.name

5
match (p:Person)
where p.born IS NULL
return p.name

6
match (m:Movie)<-[r:REVIEWED]-(p:Person)
return m.title, p.name, r.rating

match (m:Movie)<-[r]-(p:Person)
where type(r) = "REVIEWED"
return m.title, p.name, r.rating

7
match (n:Person)
where n.name starts with "James"
return n.name

8
match (n:Person)-[r:REVIEWED]->(m:Movie)
where r.summary contains "fun"
return n.name, r.summary, m.title

9
match (p:Person)-[:PRODUCED]->(:Movie)
where not exists ((p)-[:DIRECTED]-(:Movie))
return p

*** Why did we not use variables for relationship and Movie?
Also why didn't we use the arrow in where clause.

10
match (d:Person)-[:DIRECTED]->(m:Movie)<-[a:ACTED_IN]-(p:Person)
where exists ((d)-[:ACTED_IN]-(m))
return m,p,d

***Note that we cannot use .(dot) operator here as they would then be considered as seperate nodes.

11
match (m:Movie)
where m.released in [2002,2004,2006]
return m.title, m.released

Section 3: Multiple Patterns

1
match (p:Person {name: "Gene Hackman"})-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Person), (a:Person)-[:ACTED_IN]-(m)
return p,d,a,m

***Use comma to match multiple patterns.

2
match (p:Person {name: "James Thompson"})-[:FOLLOWS]->(a:Person)
return p,a

3
match (p:Person {name: "James Thompson"})-[:FOLLOWS*3]-(a:Person)
return p,a

4
match (p:Person {name: "James Thompson"})-[:FOLLOWS*..3]-(a:Person)
return p,a

5
match (p:Person {name: "James Thompson"})-[:FOLLOWS*]-(a:Person)
return p,a

6
match (p:Person)
where p.name starts with "Tom"
    OPTIONAL MATCH (p)-[:DIRECTED]-(m:Movie)
    return p.name, m.title

***
OPTIONAL MATCH has retained those with m.title as null.

7
match (p:Person)-[:ACTED_IN]->(m:Movie)
return p.name, collect(m.title)

***
collect is similar to group by.

8
match (p:Person)-[:REVIEWED]->(m:Movie)
with m.title as mov, collect(p.name) as revs
return mov, revs, size(revs)

match (m:Movie)
optional match (p:Person)-[:REVIEWED]->(m)
with m.title as mov, collect(p.name) as revs
return mov, revs, size(revs)

***
This returns movies with 0 reviews also.

9
match (p:Person)-[:ACTED_IN]->(m:Movie)
where size(collect(m)) = 5
return p.name, collect(m)
***
We cannot use a function on an aggregation directly.

CORRECT:

match (p:Person)-[:ACTED_IN]->(m:Movie)
with p.name as actor, collect(m.title) as movies
where size(movies) = 5
return actor, movies

***
After 'with' the query ends and only the names defined in with clause can be used

Section 4: Distinct, Min and Max

1
match (p:Person)-[r:REVIEWED]->(m:Movie)
with m.title as mov, avg(r.rating) as average
return mov, average
order by average desc
limit 5

***
We can also use offset(check syntax) to move 5 further.

2
match (p:Person)-[r:REVIEWED]->(m:Movie)
with p.name as actor, collect(m.title) as movies
where size(movies) <= 3
return actor, movies

***
For distinct actor use distinct(actor) in return

Section 5: Lists and Date

1
match (p:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(b:Person)
return p.name, b.name, m.title

***
This can give repeated pairs
A B
B A

match (p:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(b:Person)
return [p.name, b.name], collect(m.title)

***This also gives repeated values
A B
B A

***Write a WHERE clause to correct this


2
match (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(a:Person)
return m.title as movie, collect(p.name) as actors,
collect(a.name) as producers
order by size(actors)

3
match (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(a:Person)
with m.title as movie, collect(p.name) as actors,
collect(a.name) as producers
unwind actors as act
    unwind producers as pd
        return movie, act

4
match (m:Movie)<-[:ACTED_IN]-(a:Person {name: "Tom Hanks"})
return m.title, m.released, a.born, m.released - a.born as `age of Tom during release`, date().year - m.released


